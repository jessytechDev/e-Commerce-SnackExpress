<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Snack Express</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Inter Font -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f4f8;
            color: #333;
        }
        .product-card {
            transition: transform 0.2s ease-in-out;
        }
        .product-card:hover {
            transform: translateY(-5px);
        }
        .modal {
            display: none; /* Hidden by default */
            position: fixed; /* Stay in place */
            z-index: 1000; /* Sit on top */
            left: 0;
            top: 0;
            width: 100%; /* Full width */
            height: 100%; /* Full height */
            overflow: auto; /* Enable scroll if needed */
            background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
            justify-content: center;
            align-items: center;
        }
        .modal-content {
            background-color: #fefefe;
            margin: auto;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            width: 90%;
            max-width: 500px;
            position: relative;
        }
        .close-button {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }
        .close-button:hover,
        .close-button:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }
    </style>
</head>
<body class="min-h-screen flex flex-col items-center p-4">

    <!-- Header -->
    <header class="w-full max-w-4xl bg-white shadow-md rounded-lg p-6 mb-8 text-center">
        <h1 class="text-5xl font-extrabold text-indigo-700 mb-2">Snack Express ðŸš€</h1>
        <p class="text-lg text-gray-600">Your go-to for delicious snacks, delivered fast!</p>
        <div class="mt-4 text-sm text-gray-500">
            Your User ID: <span id="userIdDisplay" class="font-semibold text-indigo-600 break-all">Loading...</span>
        </div>
    </header>

    <!-- Main Content Area -->
    <main class="w-full max-w-4xl flex flex-col lg:flex-row gap-8">

        <!-- Products Section -->
        <section class="flex-1 bg-white shadow-md rounded-lg p-6">
            <h2 class="text-3xl font-bold text-gray-800 mb-6 border-b pb-3">Our Delicious Snacks</h2>
            <div id="productsContainer" class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <!-- Product cards will be loaded here by JavaScript -->
                <div class="bg-gray-100 p-6 rounded-lg text-center text-gray-500">
                    Loading products...
                </div>
            </div>
        </section>

        <!-- Order Summary & Admin Section -->
        <aside class="w-full lg:w-1/3 bg-white shadow-md rounded-lg p-6 flex flex-col gap-6">
            <!-- Order Summary -->
            <div>
                <h2 class="text-3xl font-bold text-gray-800 mb-6 border-b pb-3">Your Cart</h2>
                <div id="cartItems" class="space-y-4">
                    <p class="text-gray-500">Your cart is empty.</p>
                </div>
                <div class="mt-6 pt-4 border-t flex justify-between items-center">
                    <span class="text-xl font-semibold text-gray-700">Total:</span>
                    <span id="cartTotal" class="text-2xl font-bold text-indigo-600">$0.00</span>
                </div>
                <button id="checkoutButton" class="mt-6 w-full bg-green-600 text-white py-3 rounded-lg font-semibold hover:bg-green-700 transition duration-300 shadow-md" disabled>
                    Checkout (Coming Soon!)
                </button>
            </div>

            <!-- Admin Section: Add Product -->
            <div class="mt-8 pt-8 border-t border-gray-200">
                <h2 class="text-3xl font-bold text-gray-800 mb-6 border-b pb-3">Admin: Add New Snack</h2>
                <form id="addProductForm" class="space-y-4">
                    <div>
                        <label for="productName" class="block text-sm font-medium text-gray-700 mb-1">Snack Name</label>
                        <input type="text" id="productName" name="productName" required class="w-full p-3 border border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500 shadow-sm">
                    </div>
                    <div>
                        <label for="productDescription" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
                        <textarea id="productDescription" name="productDescription" rows="3" required class="w-full p-3 border border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500 shadow-sm"></textarea>
                    </div>
                    <div>
                        <label for="productPrice" class="block text-sm font-medium text-gray-700 mb-1">Price ($)</label>
                        <input type="number" id="productPrice" name="productPrice" step="0.01" min="0" required class="w-full p-3 border border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500 shadow-sm">
                    </div>
                    <div>
                        <label for="productImageUrl" class="block text-sm font-medium text-gray-700 mb-1">Image URL</label>
                        <input type="url" id="productImageUrl" name="productImageUrl" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-indigo-500 focus:border-indigo-500 shadow-sm" placeholder="e.g., https://placehold.co/400x300/F0F4F8/333?text=Snack">
                    </div>
                    <button type="submit" class="w-full bg-indigo-600 text-white py-3 rounded-lg font-semibold hover:bg-indigo-700 transition duration-300 shadow-md">
                        Add Snack
                    </button>
                </form>
            </div>
        </aside>
    </main>

    <!-- Message Modal -->
    <div id="messageModal" class="modal">
        <div class="modal-content">
            <span class="close-button">&times;</span>
            <p id="modalMessage" class="text-lg text-gray-800"></p>
        </div>
    </div>

    <!-- Firebase SDKs -->
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, collection, addDoc, onSnapshot, query, doc, updateDoc, deleteDoc } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // Global variables for Firebase config and app ID
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const firebaseConfig = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

        let app;
        let db;
        let auth;
        let userId = null;
        let products = {}; // Store products fetched from Firestore
        let cart = {}; // Store items in the cart

        // Get DOM elements
        const productsContainer = document.getElementById('productsContainer');
        const addProductForm = document.getElementById('addProductForm');
        const cartItemsContainer = document.getElementById('cartItems');
        const cartTotalSpan = document.getElementById('cartTotal');
        const userIdDisplay = document.getElementById('userIdDisplay');
        const checkoutButton = document.getElementById('checkoutButton');
        const messageModal = document.getElementById('messageModal');
        const modalMessage = document.getElementById('modalMessage');
        const closeButton = document.querySelector('.close-button');

        // Function to show a custom modal message
        function showMessage(message) {
            modalMessage.textContent = message;
            messageModal.style.display = 'flex'; // Use flex to center
        }

        // Close modal when close button is clicked
        closeButton.onclick = function() {
            messageModal.style.display = 'none';
        }

        // Close modal when clicking outside of the modal content
        window.onclick = function(event) {
            if (event.target == messageModal) {
                messageModal.style.display = 'none';
            }
        }

        // Initialize Firebase and set up authentication
        async function initializeFirebase() {
            try {
                app = initializeApp(firebaseConfig);
                db = getFirestore(app);
                auth = getAuth(app);

                // Listen for auth state changes
                onAuthStateChanged(auth, async (user) => {
                    if (user) {
                        userId = user.uid;
                        userIdDisplay.textContent = userId;
                        console.log("User authenticated:", userId);
                        // Once authenticated, start listening to product and order data
                        listenToProducts();
                        listenToCart(); // Listen to user's private cart
                    } else {
                        // Sign in anonymously if no user is found or initial token is not provided
                        if (initialAuthToken) {
                            await signInWithCustomToken(auth, initialAuthToken);
                        } else {
                            await signInAnonymously(auth);
                        }
                    }
                });
            } catch (error) {
                console.error("Error initializing Firebase:", error);
                showMessage("Failed to initialize the app. Please try again later.");
            }
        }

        // Function to render products
        function renderProducts() {
            productsContainer.innerHTML = ''; // Clear existing products
            if (Object.keys(products).length === 0) {
                productsContainer.innerHTML = '<p class="col-span-full text-center text-gray-500">No snacks available yet. Add some!</p>';
                return;
            }

            Object.values(products).forEach(product => {
                const productCard = document.createElement('div');
                productCard.className = 'product-card bg-white rounded-lg shadow-md p-6 flex flex-col items-center text-center border border-gray-200';
                productCard.innerHTML = `
                    <img src="${product.imageUrl || 'https://placehold.co/400x300/F0F4F8/333?text=Snack'}" alt="${product.name}" class="w-full h-48 object-cover rounded-lg mb-4 shadow-sm">
                    <h3 class="text-2xl font-semibold text-gray-800 mb-2">${product.name}</h3>
                    <p class="text-gray-600 mb-4 flex-grow">${product.description}</p>
                    <div class="flex items-center justify-between w-full mt-auto">
                        <span class="text-3xl font-bold text-indigo-600">$${product.price.toFixed(2)}</span>
                        <button data-id="${product.id}" class="add-to-cart-btn bg-indigo-500 text-white px-5 py-2 rounded-full font-semibold hover:bg-indigo-600 transition duration-300 shadow-lg">
                            Add to Cart
                        </button>
                    </div>
                `;
                productsContainer.appendChild(productCard);
            });

            // Add event listeners for "Add to Cart" buttons
            document.querySelectorAll('.add-to-cart-btn').forEach(button => {
                button.addEventListener('click', async (e) => {
                    const productId = e.target.dataset.id;
                    const product = products[productId];
                    if (product) {
                        await addToCart(product);
                    }
                });
            });
        }

        // Function to render cart items
        function renderCart() {
            cartItemsContainer.innerHTML = '';
            let total = 0;
            if (Object.keys(cart).length === 0) {
                cartItemsContainer.innerHTML = '<p class="text-gray-500">Your cart is empty.</p>';
                checkoutButton.disabled = true;
            } else {
                checkoutButton.disabled = false;
                Object.values(cart).forEach(item => {
                    const cartItemDiv = document.createElement('div');
                    cartItemDiv.className = 'flex justify-between items-center bg-gray-50 p-3 rounded-lg shadow-sm';
                    const itemTotal = item.price * item.quantity;
                    total += itemTotal;
                    cartItemDiv.innerHTML = `
                        <div>
                            <p class="font-semibold text-gray-700">${item.name} <span class="text-sm text-gray-500">x${item.quantity}</span></p>
                            <p class="text-sm text-gray-500">$${item.price.toFixed(2)} each</p>
                        </div>
                        <div class="flex items-center space-x-2">
                            <span class="font-bold text-indigo-600">$${itemTotal.toFixed(2)}</span>
                            <button data-id="${item.id}" class="remove-from-cart-btn text-red-500 hover:text-red-700 text-lg font-bold">&times;</button>
                        </div>
                    `;
                    cartItemsContainer.appendChild(cartItemDiv);
                });
            }
            cartTotalSpan.textContent = `$${total.toFixed(2)}`;

            // Add event listeners for "Remove from Cart" buttons
            document.querySelectorAll('.remove-from-cart-btn').forEach(button => {
                button.addEventListener('click', async (e) => {
                    const productId = e.target.dataset.id;
                    await removeFromCart(productId);
                });
            });
        }

        // Add product to Firestore (Admin functionality)
        addProductForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            if (!userId) {
                showMessage("Authentication not ready. Please wait a moment.");
                return;
            }

            const name = document.getElementById('productName').value;
            const description = document.getElementById('productDescription').value;
            const price = parseFloat(document.getElementById('productPrice').value);
            const imageUrl = document.getElementById('productImageUrl').value || 'https://placehold.co/400x300/F0F4F8/333?text=Snack';

            if (isNaN(price) || price < 0) {
                showMessage("Please enter a valid price.");
                return;
            }

            try {
                // Store products in a public collection
                await addDoc(collection(db, `artifacts/${appId}/public/data/products`), {
                    name,
                    description,
                    price,
                    imageUrl,
                    createdAt: new Date()
                });
                addProductForm.reset();
                showMessage("Snack added successfully!");
            } catch (error) {
                console.error("Error adding document: ", error);
                showMessage("Failed to add snack. Please try again.");
            }
        });

        // Listen to products collection in real-time
        function listenToProducts() {
            if (!db) return; // Ensure db is initialized

            const q = collection(db, `artifacts/${appId}/public/data/products`);
            onSnapshot(q, (snapshot) => {
                products = {}; // Clear existing products
                snapshot.forEach((doc) => {
                    products[doc.id] = { id: doc.id, ...doc.data() };
                });
                renderProducts();
            }, (error) => {
                console.error("Error fetching products:", error);
                showMessage("Failed to load snacks. Please refresh the page.");
            });
        }

        // Add item to user's private cart
        async function addToCart(product) {
            if (!userId) {
                showMessage("Please wait, user authentication is still loading.");
                return;
            }
            try {
                const cartRef = collection(db, `artifacts/${appId}/users/${userId}/cart`);
                const existingItemRef = doc(cartRef, product.id); // Use product ID as document ID for cart item

                // Check if item already exists in cart
                const itemData = cart[product.id];
                if (itemData) {
                    // Update quantity
                    await updateDoc(existingItemRef, {
                        quantity: itemData.quantity + 1
                    });
                } else {
                    // Add new item
                    await setDoc(existingItemRef, {
                        id: product.id,
                        name: product.name,
                        price: product.price,
                        imageUrl: product.imageUrl,
                        quantity: 1,
                        addedAt: new Date()
                    });
                }
                showMessage(`${product.name} added to cart!`);
            } catch (error) {
                console.error("Error adding to cart:", error);
                showMessage("Failed to add item to cart. Please try again.");
            }
        }

        // Remove item from user's private cart
        async function removeFromCart(productId) {
            if (!userId) {
                showMessage("Please wait, user authentication is still loading.");
                return;
            }
            try {
                const cartRef = collection(db, `artifacts/${appId}/users/${userId}/cart`);
                const itemData = cart[productId];

                if (itemData && itemData.quantity > 1) {
                    // Decrease quantity
                    await updateDoc(doc(cartRef, productId), {
                        quantity: itemData.quantity - 1
                    });
                } else {
                    // Delete item if quantity is 1 or less
                    await deleteDoc(doc(cartRef, productId));
                }
                showMessage("Item removed from cart.");
            } catch (error) {
                console.error("Error removing from cart:", error);
                showMessage("Failed to remove item from cart. Please try again.");
            }
        }


        // Listen to user's private cart collection in real-time
        function listenToCart() {
            if (!db || !userId) return; // Ensure db and userId are initialized

            const q = collection(db, `artifacts/${appId}/users/${userId}/cart`);
            onSnapshot(q, (snapshot) => {
                cart = {}; // Clear existing cart
                snapshot.forEach((doc) => {
                    cart[doc.id] = { id: doc.id, ...doc.data() };
                });
                renderCart();
            }, (error) => {
                console.error("Error fetching cart:", error);
                showMessage("Failed to load your cart. Please refresh the page.");
            });
        }

        // Initialize Firebase when the window loads
        window.onload = initializeFirebase;

    </script>
</body>
</html>
